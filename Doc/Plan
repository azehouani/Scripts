SRG VM

CI:
	•	Pipeline: completed and tested
	•	Branch updated for use in GitAction workflow
	•	Create PRs and merge them into all projects
	•	Ranga can now retrieve artifacts from JFrog

CD for Libraries
	•	Already included in the CI process (deploy JAR files to JFrog)

CD for Batch & API:
	1.	Understand the current process for delivering packages to production
	2.	Create mapping tables per project to stop and restart services during deployment
	3.	Create the GitAction pipeline:
	•	Install Ansible, Python, JFrog
	•	Retrieve artifacts from JFrog using the branch name
	•	Create the inventory file and verify the connection between GitHub and different environments
	•	Create an Ansible playbook that allows:
	•	stopping services based on the mapping table
	•	extracting the ZIP file and deploying it to the target environment using the project name
	•	replacing log4j for each project if the library is included
	•	starting the necessary services
	4.	Test the deployment (API and Batch)
	5.	Add the CD process to the main workflow in each Java project
	6.	Test automated deployment for all libraries


SRG Kubernetes

CI:
	1.	Remove the Dockerfile from gpe-infra-as-code and include it in the project sources.
	2.	Understand the current process (how to build the Docker image and deploy it to the registry).
	3.	Adapt the new CI to work with the Kubernetes project (build & Sonar).
	4.	Create the GitAction pipeline:
	•	Define the Docker image name
	•	Build the Docker image
	•	Deploy the image to the Docker registry
	5.	Create a Helm chart to manage deployments.
	6.	Test the project deployment.

CD:
	•	Integrate ArgoCD to automate deployments.



